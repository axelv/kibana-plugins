var gulp = require('gulp');

function Task(children, func) {
   this.children = children || [];
   this.func = func || false;
}

Task.prototype.addChild = function (child) {
   this.children.push(child);
};

Task.prototype.addCallback = function (cb) {
   this.func = cb;
};

function GulpWrapper(func) {
   var _this = this;
   _this.userFunc = func;
   _this.tasks = {'default': new Task()};
};

GulpWrapper.prototype.run = function(){
   var _this = this;
   _this.userFunc(_this.task.bind(_this));
   _this.process();
};

GulpWrapper.prototype.process = function () {

   var _this = this;
   Object.keys(_this.tasks).forEach(function (key, index) {
      var func = typeof _this.tasks[key].func === 'function';
      var child = _this.tasks[key].children.length > 0;
      if (func && child) {
         gulp.task(key, _this.tasks[key].children,
            _this.tasks[key].func);
      } else if (child) {
         gulp.task(key, _this.tasks[key].children);
      } else {
         gulp.task(key, _this.tasks[key].func);
      }
   });
};

GulpWrapper.prototype.add = function (task, arg2, func) {
   var _this = this;
   var children = false;
   var parents = false;
   var cb = false;
   if (Array.isArray(arg2)) {
      if (Array.isArray(arg2[0])) {
         children = arg2[0];
         if (Array.isArray(arg2[1])) {
            parents = arg2[1];
         }
      } else {
         children = arg2;
      }
   }

   if(children){
      if(typeof func === 'function'){
         cb = func;
      }
   }else{
      if(typeof arg2 === 'function'){
         cb = arg2;
      }
   }

   if (_this.task[task]) {
      _this.tasks[task].addCallback(cb);
   } else {
      _this.tasks[task] = new Task(children, cb);
   }
   if (parents) {
      for (var i = 0; i < parents.length; i++) {
         if (!_this.tasks[parents[i]]) {
            _this.add(parents[i]);
         }
         _this.tasks[parents[i]].addChild(task);
      }
   }
};

GulpWrapper.prototype.task = GulpWrapper.prototype.add;

module.exports = function(func){
   var gp = new GulpWrapper(func);
   gp.run();
};
